{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlightService {\n  constructor(http) {\n    this.http = http;\n    this.flightList = [];\n  }\n  // findById(id: string): Observable<Flight> {\n  //   const url = `http://www.angular.at/api/flight/${id}`;\n  //   const params = { 'id': id };\n  //   const headers = new HttpHeaders().set('Accept', 'application/json');\n  //   return this.http.get<Flight>(url, { params, headers });\n  // }\n  load(filter) {\n    this.find(filter).subscribe(result => {\n      this.flightList = result;\n    }, err => {\n      console.error('error loading', err);\n    });\n  }\n  find(filter) {\n    const url = `http://localhost:5000/employees`;\n    console.log(\"findddinggggg\");\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    // const params = {\n    //   'from': filter.from,\n    //   'to': filter.to,\n    // };\n    // console.log({ params })\n    const params = {};\n    const resp = this.http.get(url, {\n      params,\n      headers\n    }).subscribe(result => {\n      console.log({\n        result\n      });\n      // return result;\n    }, err => {\n      console.error('error loading', err);\n    });\n    console.log({\n      resp\n    });\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  save(entity) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    console.log(\"savvvvvvvvvvvvving\");\n    if (entity.id) {\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.put(url, entity, {\n        headers,\n        params\n      });\n    } else {\n      url = `http://www.angular.at/api/flight`;\n      return this.http.post(url, entity, {\n        headers,\n        params\n      });\n    }\n  }\n  delete(entity) {\n    let params = new HttpParams();\n    let url = '';\n    console.log(\"deleeeeeeeeetinnnnnnnnnnnnnnn\");\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (entity.id) {\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.delete(url, {\n        headers,\n        params\n      });\n    }\n    return EMPTY;\n  }\n  static #_ = this.ɵfac = function FlightService_Factory(t) {\n    return new (t || FlightService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlightService,\n    factory: FlightService.ɵfac\n  });\n}","map":{"version":3,"names":["EMPTY","HttpHeaders","HttpParams","FlightService","constructor","http","flightList","load","filter","find","subscribe","result","err","console","error","url","log","headers","set","params","resp","get","save","entity","id","toString","put","post","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["D:\\angular-crud\\demo\\src\\app\\flight\\flight.service.ts"],"sourcesContent":["import { Flight } from './flight';\r\nimport { Employee } from './employee';\r\nimport { FlightFilter } from './flight-filter';\r\nimport { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class FlightService {\r\n  flightList: Employee[] = [];\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  // findById(id: string): Observable<Flight> {\r\n  //   const url = `http://www.angular.at/api/flight/${id}`;\r\n  //   const params = { 'id': id };\r\n  //   const headers = new HttpHeaders().set('Accept', 'application/json');\r\n  //   return this.http.get<Flight>(url, { params, headers });\r\n  // }\r\n\r\n  load(filter: FlightFilter): void {\r\n    this.find(filter).subscribe(result => {\r\n      this.flightList = result;\r\n    },\r\n      err => {\r\n        console.error('error loading', err);\r\n      }\r\n    );\r\n  }\r\n\r\n  find(filter: FlightFilter): Observable<Employee[]> {\r\n    const url = `http://localhost:5000/employees`;\r\n\r\n    console.log(\"findddinggggg\");\r\n\r\n    const headers = new HttpHeaders().set('Accept', 'application/json');\r\n\r\n    // const params = {\r\n    //   'from': filter.from,\r\n    //   'to': filter.to,\r\n    // };\r\n\r\n    // console.log({ params })\r\n    const params = {\r\n\r\n    };\r\n    const resp = this.http.get<Employee[]>(url, { params, headers }).subscribe(\r\n      result => {\r\n        console.log({ result });\r\n        // return result;\r\n      },\r\n      err => {\r\n        console.error('error loading', err);\r\n      }\r\n    );\r\n\r\n    console.log({ resp });\r\n\r\n\r\n    return this.http.get<Employee[]>(url, { params, headers });\r\n  }\r\n\r\n  save(entity: Flight): Observable<Flight> {\r\n    let params = new HttpParams();\r\n    let url = '';\r\n    const headers = new HttpHeaders().set('content-type', 'application/json');\r\n    console.log(\"savvvvvvvvvvvvving\")\r\n    if (entity.id) {\r\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`;\r\n      params = new HttpParams().set('ID', entity.id.toString());\r\n      return this.http.put<Flight>(url, entity, { headers, params });\r\n    } else {\r\n      url = `http://www.angular.at/api/flight`;\r\n      return this.http.post<Flight>(url, entity, { headers, params });\r\n    }\r\n  }\r\n\r\n  delete(entity: Flight): Observable<Flight> {\r\n\r\n    let params = new HttpParams();\r\n    let url = '';\r\n\r\n    console.log(\"deleeeeeeeeetinnnnnnnnnnnnnnn\")\r\n\r\n    const headers = new HttpHeaders().set('content-type', 'application/json');\r\n    if (entity.id) {\r\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`;\r\n      params = new HttpParams().set('ID', entity.id.toString());\r\n      return this.http.delete<Flight>(url, { headers, params });\r\n    }\r\n    return EMPTY;\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}