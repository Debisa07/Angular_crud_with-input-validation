{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DepartmentService {\n  constructor(http) {\n    this.http = http;\n    this.flightList = [];\n  }\n  findById(id) {\n    const url = `http://localhost:5000/employees/${id}`;\n    const params = {\n      'id': id\n    };\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  load(filter) {\n    this.find(filter).subscribe(result => {\n      this.flightList = result;\n    }, err => {\n      console.error('error loading', err);\n    });\n  }\n  find(filter) {\n    const url = `http://localhost:5000/employees`;\n    console.log(\"findddinggggg\");\n    const headers = new HttpHeaders().set('Accept', 'application/json');\n    // const params = {\n    //   'from': filter.from,\n    //   'to': filter.to,\n    // };\n    // console.log({ params })\n    const params = {};\n    const resp = this.http.get(url, {\n      params,\n      headers\n    }).subscribe(result => {\n      console.log({\n        result\n      });\n      // return result;\n    }, err => {\n      console.error('error loading', err);\n    });\n    console.log({\n      resp\n    });\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  save(entity) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (entity._id) {\n      console.log(\"savvvvvvvvvvvvving by id\");\n      console.log({\n        entity\n      });\n      url = `http://localhost:5000/employees/${entity._id}`;\n      params = new HttpParams().set('id', entity._id.toString());\n      return this.http.post(url, entity, {\n        headers,\n        params\n      });\n    } else {\n      console.log(\"savvvvvvvvvvvvving without id\");\n      console.log({\n        entity\n      });\n      url = `http://localhost:5000/employees`;\n      return this.http.post(url, entity, {\n        headers,\n        params\n      });\n    }\n  }\n  delete(entity) {\n    let params = new HttpParams();\n    let url = '';\n    console.log(\"deleeeeeeeeetinnnnnnnnnnnnnnn\");\n    const headers = new HttpHeaders().set('content-type', 'application/json');\n    if (entity._id) {\n      url = `http://localhost:5000/employees/${entity._id}`;\n      params = new HttpParams().set('id', entity._id);\n      return this.http.delete(url, {\n        headers,\n        params\n      });\n    }\n    return EMPTY;\n  }\n  static #_ = this.ɵfac = function DepartmentService_Factory(t) {\n    return new (t || DepartmentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DepartmentService,\n    factory: DepartmentService.ɵfac\n  });\n}","map":{"version":3,"names":["EMPTY","HttpHeaders","HttpParams","DepartmentService","constructor","http","flightList","findById","id","url","params","headers","set","get","load","filter","find","subscribe","result","err","console","error","log","resp","save","entity","_id","toString","post","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\Debisa\\Desktop\\angular\\Angular_crud_with-input-validation\\src\\app\\home\\flight.service.ts"],"sourcesContent":["import { Department } from './department';\r\nimport { DepartmentFilter } from './flight-filter';\r\nimport { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DepartmentService {\r\n  flightList: Department[] = [];\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  findById(id: string): Observable<Department> {\r\n    const url = `http://localhost:5000/employees/${id}`;\r\n    const params = { 'id': id };\r\n    const headers = new HttpHeaders().set('Accept', 'application/json');\r\n    return this.http.get<Department>(url, { params, headers });\r\n  }\r\n\r\n  load(filter: DepartmentFilter): void {\r\n    this.find(filter).subscribe(result => {\r\n      this.flightList = result;\r\n    },\r\n      err => {\r\n        console.error('error loading', err);\r\n      }\r\n    );\r\n  }\r\n\r\n  find(filter: DepartmentFilter): Observable<Department[]> {\r\n    const url = `http://localhost:5000/employees`;\r\n\r\n    console.log(\"findddinggggg\");\r\n\r\n    const headers = new HttpHeaders().set('Accept', 'application/json');\r\n\r\n    // const params = {\r\n    //   'from': filter.from,\r\n    //   'to': filter.to,\r\n    // };\r\n\r\n    // console.log({ params })\r\n    const params = {\r\n\r\n    };\r\n    const resp = this.http.get<Department[]>(url, { params, headers }).subscribe(\r\n      result => {\r\n        console.log({ result });\r\n        // return result;\r\n      },\r\n      err => {\r\n        console.error('error loading', err);\r\n      }\r\n    );\r\n\r\n    console.log({ resp });\r\n\r\n\r\n    return this.http.get<Department[]>(url, { params, headers });\r\n  }\r\n\r\n  save(entity: Department): Observable<Department> {\r\n    let params = new HttpParams();\r\n    let url = '';\r\n    const headers = new HttpHeaders().set('content-type', 'application/json');\r\n    if (entity._id) {\r\n      console.log(\"savvvvvvvvvvvvving by id\");\r\n      console.log({ entity });\r\n      url = `http://localhost:5000/employees/${entity._id}`;\r\n      params = new HttpParams().set('id', entity._id.toString());\r\n      return this.http.post<Department>(url, entity, { headers, params });\r\n    } else {\r\n      console.log(\"savvvvvvvvvvvvving without id\");\r\n      console.log({ entity });\r\n      url = `http://localhost:5000/employees`;\r\n      return this.http.post<Department>(url, entity, { headers, params });\r\n    }\r\n  }\r\n\r\n  delete(entity: Department): Observable<Department> {\r\n\r\n    let params = new HttpParams();\r\n    let url = '';\r\n\r\n    console.log(\"deleeeeeeeeetinnnnnnnnnnnnnnn\")\r\n\r\n    const headers = new HttpHeaders().set('content-type', 'application/json');\r\n    if (entity._id) {\r\n      url = `http://localhost:5000/employees/${entity._id}`;\r\n      params = new HttpParams().set('id', entity._id);\r\n      return this.http.delete<Department>(url, { headers, params });\r\n    }\r\n    return EMPTY;\r\n  }\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}